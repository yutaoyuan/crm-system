name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-js-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install electron-updater
        run: npm install electron-updater --save-dev
        
      # Windows代码签名
      - name: Import Windows certificate
        if: matrix.os == 'windows-latest'
        run: |
          if (-not (Test-Path "certs")) { New-Item -ItemType Directory -Name "certs" }
          $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.WIN_CSC_LINK }}")
          [System.IO.File]::WriteAllBytes("certs/windows.p12", $pfxBytes)
        shell: powershell
        
      # macOS代码签名
      - name: Import macOS certificate
        if: matrix.os == 'macos-latest'
        run: |
          # 创建keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          
          # 导入证书
          echo "${{ secrets.MAC_CSC_LINK }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.MAC_CSC_KEY_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run build
        env:
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run build
        env:
          CSC_LINK: ${{ secrets.MAC_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/
          
      # 清理敏感文件
      - name: Cleanup certificates
        if: always()
        run: |
          if [ -f "certs/windows.p12" ]; then rm -f certs/windows.p12; fi
          if [ -f "certificate.p12" ]; then rm -f certificate.p12; fi
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            security delete-keychain build.keychain || true
          fi
        shell: bash

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate release notes
        id: release_notes
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # 提取最新版本的更新日志
            awk '/^## / { if (NR==1) next; else exit } /^## / { exit } { print }' CHANGELOG.md > release_notes.txt
          else
            echo "## 更新内容" > release_notes.txt
            echo "- 新版本发布" >> release_notes.txt
            echo "- Bug修复和性能优化" >> release_notes.txt
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist-windows-latest/*.exe
            dist-macos-latest/*.dmg
            dist-ubuntu-latest/*.AppImage
            dist-ubuntu-latest/*.deb
          body_path: release_notes.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}